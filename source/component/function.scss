@charset "utf-8";


@function leveled-color($scheme, $level, $alpha: null) {
  @if $alpha != null {
    @return rgb(var(#{"--color-" + $scheme + "-" + $level}), $alpha);
  } @else {
    @return rgb(var(#{"--color-" + $scheme + "-" + $level}));
  }
}

@function single-color($scheme, $alpha: null) {
  @if $alpha != null {
    @return rgb(var(#{"--color-" + $scheme}), $alpha);
  } @else {
    @return rgb(var(#{"--color-" + $scheme}));
  }
}


@mixin theme($theme) {
  html[data-theme="#{$theme}"] & {
    @content;
  }
}

@mixin schemify {
  @each $scheme in "primary", "secondary", "blue", "red", "gray" {
    &[data-scheme="#{$scheme}"] {
      @content($scheme);
    }
  }
}

@mixin bold-font {
  font-family: var(--font-family-bold);
  font-weight: bold;
}

@mixin line-height($line-height) {
  line-height: $line-height;
  &::before {
    width: 0u;
    height: 0u;
    margin-block-start: (1 - $line-height) * 0.5em;
    display: block;
    content: "";
  }
  &::after {
    width: 0u;
    height: 0u;
    margin-block-end: (1 - $line-height) * 0.5em;
    display: block;
    content: "";
  }
}

@mixin control-group-vars {
  --loc-left-border-radius: #{var(--border-radius)};
  --loc-right-border-radius: #{var(--border-radius)};
  --loc-margin-left: 0u;
  :global(.control-group) >& {
    &:first-child {
      --loc-left-border-radius: #{var(--border-radius)};
      --loc-margin-left: 0u;
    }
    &:not(:first-child) {
      --loc-left-border-radius: 0u;
      --loc-margin-left: -1px;
    }
    &:last-child {
      --loc-right-border-radius: #{var(--border-radius)};
    }
    &:not(:last-child) {
      --loc-right-border-radius: 0u;
    }
  }
}

@mixin control-group-item {
  margin-inline-start: var(--loc-margin-left);
  margin-inline-end: var(--loc-margin-right);
  border-start-start-radius: var(--loc-left-border-radius);
  border-end-start-radius: var(--loc-left-border-radius);
  border-start-end-radius: var(--loc-right-border-radius);
  border-end-end-radius: var(--loc-right-border-radius);
}